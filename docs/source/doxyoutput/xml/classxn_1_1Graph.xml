<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classxn_1_1Graph" kind="class" language="C++" prot="public">
    <compoundname>xn::Graph</compoundname>
    <basecompoundref refid="structxn_1_1object" prot="public" virt="non-virtual">xn::object</basecompoundref>
    <derivedcompoundref refid="classxn_1_1VertexView" prot="public" virt="non-virtual">xn::VertexView&lt; Graph &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>nodeview_t</declname>
        <defname>nodeview_t</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>nodemap_t</declname>
        <defname>nodemap_t</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>adjlist_inner_dict_factory</declname>
        <defname>adjlist_inner_dict_factory</defname>
        <defval><ref refid="classpy_1_1set" kindref="compound">py::set</ref>&lt;typename nodeview_t::value_type&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classxn_1_1Graph_1aec24094b26e6961d31dc8debb49dcb52" prot="public" static="no">
        <type>typename nodeview_t::value_type</type>
        <definition>using xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::Node =  typename nodeview_t::value_type</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="208" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxn_1_1Graph_1a9871382d657341b1db55419073fa6c26" prot="public" static="no">
        <type><ref refid="classpy_1_1dict" kindref="compound">py::dict</ref>&lt; const char *, std::any &gt;</type>
        <definition>using xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::dict =  py::dict&lt;const char*, std::any&gt;</definition>
        <argsstring></argsstring>
        <name>dict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="209" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxn_1_1Graph_1aeb3e67398ed06969de51b2ceb0a293e7" prot="public" static="no">
        <type><ref refid="classpy_1_1dict" kindref="compound">dict</ref></type>
        <definition>using xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::graph_attr_dict_factory =  dict</definition>
        <argsstring></argsstring>
        <name>graph_attr_dict_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="210" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxn_1_1Graph_1a195e1336b21117e86d6949d810819db5" prot="public" static="no">
        <type>std::vector&lt; adjlist_inner_dict_factory &gt;</type>
        <definition>using xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::adjlist_outer_dict_factory =  std::vector&lt;adjlist_inner_dict_factory&gt;</definition>
        <argsstring></argsstring>
        <name>adjlist_outer_dict_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="217" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxn_1_1Graph_1abe5771eb50bc5014924e0ada909badcc" prot="public" static="no">
        <type>typename adjlist_inner_dict_factory::key_type</type>
        <definition>using xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::key_type =  typename adjlist_inner_dict_factory::key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="218" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxn_1_1Graph_1a5a1be9e7c9001ba1fc6c5a511e0f57ec" prot="public" static="no">
        <type>typename adjlist_inner_dict_factory::value_type</type>
        <definition>using xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::value_type =  typename adjlist_inner_dict_factory::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="219" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classxn_1_1Graph_1acb3b3e3aeb40bf00f4c240890cac4a73" prot="public" static="no" mutable="no">
        <type>nodeview_t</type>
        <definition>nodeview_t xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="223" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classxn_1_1Graph_1ae27a103f03bf493af286ac3dec83765c" prot="public" static="no" mutable="no">
        <type>nodemap_t</type>
        <definition>nodemap_t xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::_node_map</definition>
        <argsstring></argsstring>
        <name>_node_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="224" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classxn_1_1Graph_1a85745d406fd0a8b660e715faf7a82d09" prot="public" static="no" mutable="no">
        <type><ref refid="classpy_1_1dict" kindref="compound">graph_attr_dict_factory</ref></type>
        <definition>graph_attr_dict_factory xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::graph</definition>
        <argsstring></argsstring>
        <name>graph</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="225" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classxn_1_1Graph_1a8c39c525beac71f75c173df176dbb3ee" prot="public" static="no" mutable="no">
        <type>adjlist_outer_dict_factory</type>
        <definition>adjlist_outer_dict_factory xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::_adj</definition>
        <argsstring></argsstring>
        <name>_adj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="227" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classxn_1_1Graph_1aa5b3ea16ddf84a48199223496905f922" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::Graph</definition>
        <argsstring>(const nodeview_t &amp;Nodes, const nodemap_t &amp;node_map)</argsstring>
        <name>Graph</name>
        <param>
          <type>const nodeview_t &amp;</type>
          <declname>Nodes</declname>
        </param>
        <param>
          <type>const nodemap_t &amp;</type>
          <declname>node_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a graph with edges, name, or graph attributes.</para><para><heading level="2">Parameters </heading>
</para><para>node_container : input nodes</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>v = std::vector{5, 3, 2}; G = <ref refid="classxn_1_1Graph" kindref="compound">xn::Graph(v)</ref>; // or DiGraph, MultiGraph, MultiDiGraph, etc </para></blockquote></para></blockquote></para></blockquote></para><para><blockquote><para><blockquote><para><blockquote><para>r = py::range(100); G = <ref refid="classxn_1_1Graph" kindref="compound">xn::Graph(r)</ref>; // or DiGraph, MultiGraph, MultiDiGraph, etc</para></blockquote></para></blockquote></para></blockquote></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="258" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1aac4986c1e92948db7df60e26187601b8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::Graph</definition>
        <argsstring>(int num_nodes)</argsstring>
        <name>Graph</name>
        <param>
          <type>int</type>
          <declname>num_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="265" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="265" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1ab6bf1081dc0fbd769e41b3797763c18c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::adj</definition>
        <argsstring>() const</argsstring>
        <name>adj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classxn_1_1Graph" kindref="compound">Graph</ref> adjacency object holding the neighbors of each node.</para><para>This object is a read-only dict-like structure with node keys and neighbor-dict values. The neighbor-dict is keyed by neighbor to the edge-data-dict. So `G.adj[3][2][&apos;color&apos;] = &apos;blue&apos;<computeroutput>sets the color of the edge</computeroutput>(3, 2)<computeroutput>to</computeroutput>&quot;blue&quot;`.</para><para>Iterating over G.adj behaves like a dict. Useful idioms include <computeroutput>for nbr, datadict in G.adj[n].items():</computeroutput>.</para><para>The neighbor information is also provided by subscripting the graph. So `for nbr, foovalue in G[node].data(&apos;foo&apos;, default=1):` works.</para><para>For directed graphs, <computeroutput>G.adj</computeroutput> holds outgoing (successor) info. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="288" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1ae1d12cc44bbd983e5a92d50be43957d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::get_name</definition>
        <argsstring>()</argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>String identifier of the graph.</para><para>This graph attribute appears : the attribute dict G.graph keyed by the string <computeroutput>&quot;name&quot;</computeroutput>. as well as an attribute (technically a property) <computeroutput>G.name</computeroutput>. This is entirely user controlled.</para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="294" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="294" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a3751b02b878b6ece8c5e54010201bebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::set_name</definition>
        <argsstring>(const char *s)</argsstring>
        <name>set_name</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="308" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a0eb06caefea5f60a5156e15662123d2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over the nodes. Use: &quot;for (auto n : G)&quot;.</para><para><heading level="2">Returns </heading>
</para><para>niter : iterator An iterator over all nodes : the graph.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(4); // or DiGraph, MultiGraph, MultiDiGraph, etc [n for n : G]; </para></blockquote></para></blockquote></para></blockquote>[0, 1, 2, 3]; <blockquote><para><blockquote><para><blockquote><para>list(G); </para></blockquote></para></blockquote></para></blockquote>[0, 1, 2, 3]; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="328" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a593c1ff383ba572c10533e25eb027d4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="333" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a17854eecf334b3eea2bf7145d6905dd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::contains</definition>
        <argsstring>(const Node &amp;n)</argsstring>
        <name>contains</name>
        <param>
          <type>const Node &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if (n is a node, false otherwise. Use: &quot;n : G&quot;.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(4); // or DiGraph, MultiGraph, MultiDiGraph, etc 1 : G </para></blockquote></para></blockquote></para></blockquote>true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="346" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1aa52862be660affb17c76e914a7e6ce27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::operator[]</definition>
        <argsstring>(const Node &amp;n) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const Node &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a dict of neighbors of node n. Use: &quot;G[n]&quot;.</para><para><heading level="2">Parameters </heading>
</para><para>n : node A node in the graph.</para><para><heading level="2">Returns </heading>
</para><para>adj_dict : dictionary The adjacency dictionary for nodes connected to n.</para><para><heading level="2">Notes </heading>
</para><para>G[n] is the same as G.adj[n] &amp;&amp; similar to G.neighbors(n); (which is an iterator over G.adj[n]);</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(4); // or DiGraph, MultiGraph, MultiDiGraph, etc G[0]; </para></blockquote></para></blockquote></para></blockquote><ref refid="classxn_1_1AtlasView" kindref="compound">AtlasView</ref>({1: {}}); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="374" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="374" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1abd3e6148e487a43786baab2448f975f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::nodes</definition>
        <argsstring>()</argsstring>
        <name>nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>A <ref refid="classxn_1_1NodeView" kindref="compound">NodeView</ref> of the <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref> as G.nodes().</para><para><heading level="2">Returns </heading>
</para><para><ref refid="classxn_1_1NodeView" kindref="compound">NodeView</ref> Allows set-like operations over the nodes as well as node attribute dict lookup &amp;&amp; calling to get a NodeDataView. A NodeDataView iterates over <computeroutput>(n, data)</computeroutput> &amp;&amp; has no set operations. A <ref refid="classxn_1_1NodeView" kindref="compound">NodeView</ref> iterates over <computeroutput>n</computeroutput> &amp;&amp; includes set operations.</para><para>When called, if (data == false, an iterator over nodes. Otherwise an iterator of 2-tuples (node, attribute value); where the attribute is specified : <computeroutput>data</computeroutput>. If data is true then the attribute becomes the entire data dictionary.</para><para><heading level="2">Notes </heading>
</para><para>If your node data is not needed, it is simpler and equivalent to use the expression <computeroutput>for n : G</computeroutput>, or <computeroutput>list(G)</computeroutput>.</para><para><heading level="2">Examples </heading>
</para><para>There are two simple ways of getting a list of all nodes : the graph) {</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3); list(G.nodes); </para></blockquote></para></blockquote></para></blockquote>[0, 1, 2]; <blockquote><para><blockquote><para><blockquote><para>list(G); </para></blockquote></para></blockquote></para></blockquote>[0, 1, 2];</para><para>To get the node data along with the nodes) {</para><para><blockquote><para><blockquote><para><blockquote><para>G.add_node(1, time=&quot;5pm&quot;); G.nodes[0][&quot;foo&quot;] = &quot;bar&quot;; list(G.nodes(data=true)); </para></blockquote></para></blockquote></para></blockquote>[(0, {&quot;foo&quot;: &quot;bar&quot;}), (1, {&quot;time&quot;: &quot;5pm&quot;}), (2, {})]; <blockquote><para><blockquote><para><blockquote><para>list(G.nodes.data()); </para></blockquote></para></blockquote></para></blockquote>[(0, {&quot;foo&quot;: &quot;bar&quot;}), (1, {&quot;time&quot;: &quot;5pm&quot;}), (2, {})];</para><para><blockquote><para><blockquote><para><blockquote><para>list(G.nodes(data=&quot;foo&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, &quot;bar&quot;), (1, None), (2, None)]; <blockquote><para><blockquote><para><blockquote><para>list(G.nodes.data(&quot;foo&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, &quot;bar&quot;), (1, None), (2, None)];</para><para><blockquote><para><blockquote><para><blockquote><para>list(G.nodes(data=&quot;time&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, None), (1, &quot;5pm&quot;), (2, None)]; <blockquote><para><blockquote><para><blockquote><para>list(G.nodes.data(&quot;time&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, None), (1, &quot;5pm&quot;), (2, None)];</para><para><blockquote><para><blockquote><para><blockquote><para>list(G.nodes(data=&quot;time&quot;, default=&quot;Not Available&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, &quot;Not Available&quot;), (1, &quot;5pm&quot;), (2, &quot;Not Available&quot;)]; <blockquote><para><blockquote><para><blockquote><para>list(G.nodes.data(&quot;time&quot;, default=&quot;Not Available&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, &quot;Not Available&quot;), (1, &quot;5pm&quot;), (2, &quot;Not Available&quot;)];</para><para>If some of your nodes have an attribute &amp;&amp; the rest are assumed to have a default attribute value you can create a dictionary from node/attribute pairs using the <computeroutput>default</computeroutput> keyword argument to guarantee the value is never None:) { <verbatim>&gt;&gt;&gt; G = xn::Graph();
&gt;&gt;&gt; G.add_node(0);
&gt;&gt;&gt; G.add_node(1, weight=2);
&gt;&gt;&gt; G.add_node(2, weight=3);
&gt;&gt;&gt; dict(G.nodes(data=&quot;weight&quot;, default=1));
{0: 1, 1: 2, 2: 3}
</verbatim></para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="380" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="380" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a59ff465d2c4744027fb12939ae162dcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::number_of_nodes</definition>
        <argsstring>() const</argsstring>
        <name>number_of_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of nodes : the graph.</para><para><heading level="2">Returns </heading>
</para><para>nnodes : int The number of nodes : the graph.</para><para><heading level="2">See Also </heading>
</para><para>order, <bold>len</bold> which are identical</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3); // or DiGraph, MultiGraph, MultiDiGraph, etc len(G); </para></blockquote></para></blockquote></para></blockquote>3 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="475" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="475" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a5b450fc774873eb6525c9b981bfb12ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::order</definition>
        <argsstring>()</argsstring>
        <name>order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of nodes : the graph.</para><para><heading level="2">Returns </heading>
</para><para>nnodes : int The number of nodes : the graph.</para><para><heading level="2">See Also </heading>
</para><para>number_of_nodes, <bold>len</bold> which are identical </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="491" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="491" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a08033908fd67a682754ae02933ba6403" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::has_node</definition>
        <argsstring>(const Node &amp;n)</argsstring>
        <name>has_node</name>
        <param>
          <type>const Node &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if (the graph contains the node n.</para><para>Identical to <computeroutput>n : G</computeroutput></para><para><heading level="2">Parameters </heading>
</para><para>n : node</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3); // or DiGraph, MultiGraph, MultiDiGraph, etc G.has_node(0); </para></blockquote></para></blockquote></para></blockquote>true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="510" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="510" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a3b5c7079f01f9473cb81ce8ebd3d1e05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::add_edge</definition>
        <argsstring>(const Node &amp;u, const Node &amp;v)</argsstring>
        <name>add_edge</name>
        <param>
          <type>const Node &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const Node &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Add an edge between u &amp;&amp; v.</para><para>The nodes u &amp;&amp; v will be automatically added if (they are not already : the graph.</para><para>Edge attributes can be specified with keywords || by directly accessing the edge"s attribute dictionary. See examples below.</para><para><heading level="2">Parameters </heading>
</para><para>u, v : nodes Nodes can be, for example, strings || numbers. Nodes must be hashable (and not None) C++ objects.</para><para><heading level="2">See Also </heading>
</para><para>add_edges_from : add a collection of edges</para><para><heading level="2">Notes </heading>
</para><para>Adding an edge that already exists updates the edge data.</para><para>Many XNetwork algorithms designed for weighted graphs use an edge attribute (by default <computeroutput>weight</computeroutput>) to hold a numerical value.</para><para><heading level="2">Examples </heading>
</para><para>The following all add the edge e=(1, 2) to graph G) {</para><para><blockquote><para><blockquote><para><blockquote><para>G = <ref refid="classxn_1_1Graph" kindref="compound">xn::Graph()</ref> // or DiGraph, MultiGraph, MultiDiGraph, etc e = (1, 2); G.add_edge(1, 2) // explicit two-node form G.add_edges_from([(1, 2)]); // add edges from iterable container </para></blockquote></para></blockquote></para></blockquote></para><para>Associate data to edges using keywords) {</para><para><blockquote><para><blockquote><para><blockquote><para>G.add_edge(1, 2); </para></blockquote></para></blockquote></para></blockquote></para><para>For non-string attribute keys, use subscript notation.</para><para><blockquote><para><blockquote><para><blockquote><para>G.add_edge(1, 2); G[1][2].update({0: 5}); G.edges[1, 2].update({0: 5}); </para></blockquote></para></blockquote></para></blockquote></para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="515" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="515" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a87954129903fcccd1ae6a02a7917160b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::has_edge</definition>
        <argsstring>(const Node &amp;u, const Node &amp;v) -&gt; bool</argsstring>
        <name>has_edge</name>
        <param>
          <type>const Node &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const Node &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return true if (the edge (u, v) is : the graph.</para><para>This is the same as <computeroutput>v : G[u]</computeroutput> without KeyError exceptions.</para><para><heading level="2">Parameters </heading>
</para><para>u, v : nodes Nodes can be, for example, strings || numbers. Nodes must be hashable (and not None) C++ objects.</para><para><heading level="2">Returns </heading>
</para><para>edge_ind : bool true if (edge is : the graph, false otherwise.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(4); // or DiGraph, MultiGraph, MultiDiGraph, etc G.has_edge(0, 1); // using two nodes </para></blockquote></para></blockquote></para></blockquote>true <blockquote><para><blockquote><para><blockquote><para>e = (0, 1); G.has_edge(*e); // e is a 2-tuple (u, v); </para></blockquote></para></blockquote></para></blockquote>true <blockquote><para><blockquote><para><blockquote><para>e = (0, 1, {&quot;weight&quot;:7}); G.has_edge(*e[:2]); // e is a 3-tuple (u, v, data_dictionary); </para></blockquote></para></blockquote></para></blockquote>true</para><para>The following syntax are equivalent) {</para><para><blockquote><para><blockquote><para><blockquote><para>G.has_edge(0, 1); </para></blockquote></para></blockquote></para></blockquote>true <blockquote><para><blockquote><para><blockquote><para>1 : G[0]; // though this gives KeyError if (0 not : G </para></blockquote></para></blockquote></para></blockquote>true</para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="583" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="583" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1a8190f6d88f8933f798828d8e063d6b12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::degree</definition>
        <argsstring>(const Node &amp;n)</argsstring>
        <name>degree</name>
        <param>
          <type>const Node &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="623" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="623" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1af611a2a696038170668ac86ff90166f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An <ref refid="classxn_1_1EdgeView" kindref="compound">EdgeView</ref> of the <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref> as G.edges || G.edges().</para><para>edges( nbunch=None, data=false, default=None);</para><para>The <ref refid="classxn_1_1EdgeView" kindref="compound">EdgeView</ref> provides set-like operations on the edge-tuples as well as edge attribute lookup. When called, it also provides an EdgeDataView object which allows control of access to edge attributes (but does not provide set-like operations). Hence, <computeroutput>G.edges[u, v][&quot;color&quot;]</computeroutput> provides the value of the color attribute for edge <computeroutput>(u, v)</computeroutput> while <computeroutput>for (auto u, v, c] : G.edges.data(&quot;color&quot;, default=&quot;red&quot;) {</computeroutput> iterates through all the edges yielding the color attribute with default <computeroutput>&quot;red&quot;</computeroutput> if (no color attribute exists.</para><para><heading level="2">Parameters </heading>
</para><para>nbunch : single node, container, || all nodes (default= all nodes); The view will only report edges incident to these nodes. data : string || bool, optional (default=false); The edge attribute returned : 3-tuple (u, v, ddict[data]). If true, return edge attribute dict : 3-tuple (u, v, ddict). If false, return 2-tuple (u, v). default : value, optional (default=None); Value used for edges that don"t have the requested attribute. Only relevant if (data is not true || false.</para><para><heading level="2">Returns </heading>
</para><para>edges : <ref refid="classxn_1_1EdgeView" kindref="compound">EdgeView</ref> A view of edge attributes, usually it iterates over (u, v); || (u, v, d) tuples of edges, but can also be used for attribute lookup as <computeroutput>edges[u, v][&quot;foo&quot;]</computeroutput>.</para><para><heading level="2">Notes </heading>
</para><para>Nodes : nbunch that are not : the graph will be (quietly) ignored. For directed graphs this returns the out-edges.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3) // or MultiGraph, etc G.add_edge(2, 3, weight=5); [e for e : G.edges]; </para></blockquote></para></blockquote></para></blockquote>[(0, 1), (1, 2), (2, 3)]; <blockquote><para><blockquote><para><blockquote><para>G.edges.data(); // default data is {} (empty dict); </para></blockquote></para></blockquote></para></blockquote>EdgeDataView([(0, 1, {}), (1, 2, {}), (2, 3, {&quot;weight&quot;: 5})]); <blockquote><para><blockquote><para><blockquote><para>G.edges.data(&quot;weight&quot;, default=1); </para></blockquote></para></blockquote></para></blockquote>EdgeDataView([(0, 1, 1), (1, 2, 1), (2, 3, 5)]); <blockquote><para><blockquote><para><blockquote><para>G.edges([0, 3]); // only edges incident to these nodes </para></blockquote></para></blockquote></para></blockquote>EdgeDataView([(0, 1), (3, 2)]); <blockquote><para><blockquote><para><blockquote><para>G.edges(0); // only edges incident to a single node (use </para></blockquote></para></blockquote></para></blockquote>G.adj[0]?); EdgeDataView([(0, 1)]); A DegreeView for the <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref> as G.degree || G.degree().</para><para>The node degree is the number of edges adjacent to the node. The weighted node degree is the sum of the edge weights for edges incident to that node.</para><para>This object provides an iterator for (auto node, degree) as well as lookup for the degree for a single node.</para><para><heading level="2">Parameters </heading>
</para><para>nbunch : single node, container, || all nodes (default= all nodes); The view will only report edges incident to these nodes.</para><para>weight : string || None, optional (default=None); The name of an edge attribute that holds the numerical value used as a weight. If None, then each edge has weight 1. The degree is the sum of the edge weights adjacent to the node.</para><para><heading level="2">Returns </heading>
</para><para>If a single node is requested deg : int Degree of the node</para><para>OR if (multiple nodes are requested nd_view : A DegreeView object capable of iterating (node, degree) pairs</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(4); // or DiGraph, MultiGraph, MultiDiGraph, </para></blockquote></para></blockquote></para></blockquote>etc <blockquote><para><blockquote><para><blockquote><para>G.degree[0]; // node 0 has degree 1 </para></blockquote></para></blockquote></para></blockquote>1 <blockquote><para><blockquote><para><blockquote><para>list(G.degree([0, 1, 2])); </para></blockquote></para></blockquote></para></blockquote>[(0, 1), (1, 2), (2, 2)]; </para>        </detaileddescription>
        <inbodydescription>
<para>Remove all nodes &amp;&amp; edges from the graph.</para><para>This also removes the name, &amp;&amp; all graph, node, &amp;&amp; edge attributes.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(4); // or DiGraph, MultiGraph, MultiDiGraph, etc G.clear(); list(G.nodes); </para></blockquote></para></blockquote></para></blockquote>[]; <blockquote><para><blockquote><para><blockquote><para>list(G.edges); </para></blockquote></para></blockquote></para></blockquote>[];</para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="733" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="733" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1ae7b94da77f99a3c86b78f02232d9e2ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::is_multigraph</definition>
        <argsstring>()</argsstring>
        <name>is_multigraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return true if (graph is a multigraph, false otherwise. </para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="754" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="754" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classxn_1_1Graph_1ac0a2ebc716d2578c2b28d0e1e725e234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;::is_directed</definition>
        <argsstring>()</argsstring>
        <name>is_directed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return true if (graph is directed, false otherwise. </para>        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="760" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="760" bodyend="764"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="179">
        <label>xn::VertexView&lt; Graph &gt;</label>
        <link refid="classxn_1_1VertexView"/>
        <childnode refid="175" relation="public-inheritance">
        </childnode>
      </node>
      <node id="175">
        <label>xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;</label>
        <link refid="classxn_1_1Graph"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="176">
        <label>xn::object</label>
        <link refid="structxn_1_1object"/>
        <childnode refid="177" relation="public-inheritance">
        </childnode>
      </node>
      <node id="178">
        <label>std::unordered_map&lt; const char *, std::any &gt;</label>
      </node>
      <node id="177">
        <label>py::dict&lt; const char *, std::any &gt;</label>
        <link refid="classpy_1_1dict"/>
        <childnode refid="178" relation="public-inheritance">
        </childnode>
      </node>
      <node id="180">
        <label>xn::grAdaptor&lt; Graph &gt;</label>
        <link refid="classxn_1_1grAdaptor"/>
        <childnode refid="179" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="181">
        <label>xn::Graph&lt; nodeview_t, nodemap_t, adjlist_inner_dict_factory &gt;</label>
        <link refid="classxn_1_1Graph"/>
        <childnode refid="182" relation="public-inheritance">
        </childnode>
        <childnode refid="183" relation="usage">
          <edgelabel>graph</edgelabel>
        </childnode>
      </node>
      <node id="182">
        <label>xn::object</label>
        <link refid="structxn_1_1object"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="184">
        <label>std::unordered_map&lt; const char *, std::any &gt;</label>
      </node>
      <node id="183">
        <label>py::dict&lt; const char *, std::any &gt;</label>
        <link refid="classpy_1_1dict"/>
        <childnode refid="184" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="206" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="205" bodyend="765"/>
    <listofallmembers>
      <member refid="classxn_1_1Graph_1a8c39c525beac71f75c173df176dbb3ee" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>_adj</name></member>
      <member refid="classxn_1_1Graph_1acb3b3e3aeb40bf00f4c240890cac4a73" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>_node</name></member>
      <member refid="classxn_1_1Graph_1ae27a103f03bf493af286ac3dec83765c" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>_node_map</name></member>
      <member refid="classxn_1_1Graph_1a3b5c7079f01f9473cb81ce8ebd3d1e05" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>add_edge</name></member>
      <member refid="classxn_1_1Graph_1ab6bf1081dc0fbd769e41b3797763c18c" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>adj</name></member>
      <member refid="classxn_1_1Graph_1a195e1336b21117e86d6949d810819db5" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>adjlist_outer_dict_factory</name></member>
      <member refid="classxn_1_1Graph_1a0eb06caefea5f60a5156e15662123d2f" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>begin</name></member>
      <member refid="classxn_1_1Graph_1af611a2a696038170668ac86ff90166f4" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>clear</name></member>
      <member refid="classxn_1_1Graph_1a17854eecf334b3eea2bf7145d6905dd1" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>contains</name></member>
      <member refid="classxn_1_1Graph_1a8190f6d88f8933f798828d8e063d6b12" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>degree</name></member>
      <member refid="classxn_1_1Graph_1a9871382d657341b1db55419073fa6c26" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>dict</name></member>
      <member refid="classpy_1_1dict_1aa7fa8bf2e9f18a3f16642566c4c595f2" prot="public" virt="non-virtual" ambiguityscope="xn::object::"><scope>xn::Graph</scope><name>dict</name></member>
      <member refid="classpy_1_1dict_1a1cea0f6dc3fd12ba2ed5c9d217141b4b" prot="public" virt="non-virtual" ambiguityscope="xn::object::"><scope>xn::Graph</scope><name>dict</name></member>
      <member refid="classxn_1_1Graph_1a593c1ff383ba572c10533e25eb027d4a" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>end</name></member>
      <member refid="classxn_1_1Graph_1ae1d12cc44bbd983e5a92d50be43957d9" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>get_name</name></member>
      <member refid="classxn_1_1Graph_1a85745d406fd0a8b660e715faf7a82d09" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>graph</name></member>
      <member refid="classxn_1_1Graph_1aa5b3ea16ddf84a48199223496905f922" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>Graph</name></member>
      <member refid="classxn_1_1Graph_1aac4986c1e92948db7df60e26187601b8" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>Graph</name></member>
      <member refid="classxn_1_1Graph_1aeb3e67398ed06969de51b2ceb0a293e7" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>graph_attr_dict_factory</name></member>
      <member refid="classxn_1_1Graph_1a87954129903fcccd1ae6a02a7917160b" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>has_edge</name></member>
      <member refid="classxn_1_1Graph_1a08033908fd67a682754ae02933ba6403" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>has_node</name></member>
      <member refid="classxn_1_1Graph_1ac0a2ebc716d2578c2b28d0e1e725e234" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>is_directed</name></member>
      <member refid="classxn_1_1Graph_1ae7b94da77f99a3c86b78f02232d9e2ed" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>is_multigraph</name></member>
      <member refid="classxn_1_1Graph_1abe5771eb50bc5014924e0ada909badcc" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>key_type</name></member>
      <member refid="classxn_1_1Graph_1aec24094b26e6961d31dc8debb49dcb52" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>Node</name></member>
      <member refid="classxn_1_1Graph_1abd3e6148e487a43786baab2448f975f1" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>nodes</name></member>
      <member refid="classxn_1_1Graph_1a59ff465d2c4744027fb12939ae162dcb" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>number_of_nodes</name></member>
      <member refid="classpy_1_1dict_1a8fd455a25ca9e64e8d0565c3a39b6b94" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>operator=</name></member>
      <member refid="classxn_1_1Graph_1aa52862be660affb17c76e914a7e6ce27" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>operator[]</name></member>
      <member refid="classxn_1_1Graph_1a5b450fc774873eb6525c9b981bfb12ff" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>order</name></member>
      <member refid="classxn_1_1Graph_1a3751b02b878b6ece8c5e54010201bebf" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>set_name</name></member>
      <member refid="classxn_1_1Graph_1a5a1be9e7c9001ba1fc6c5a511e0f57ec" prot="public" virt="non-virtual"><scope>xn::Graph</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
