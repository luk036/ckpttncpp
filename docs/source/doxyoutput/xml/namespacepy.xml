<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacepy" kind="namespace" language="C++">
    <compoundname>py</compoundname>
    <innerclass refid="classpy_1_1dict" prot="public">py::dict</innerclass>
    <innerclass refid="structpy_1_1key__iterator" prot="public">py::key_iterator</innerclass>
    <innerclass refid="classpy_1_1set" prot="public">py::set</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="py2cpp_8hpp_1a13b079f9cc2ef2797f2908169c6e24c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TIter</type>
            <defval>decltype(std::begin(std::declval&lt;T&gt;()))</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>decltype(std::end(std::declval&lt;T&gt;()))</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto py::enumerate</definition>
        <argsstring>(T &amp;&amp;iterable)</argsstring>
        <name>enumerate</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>iterable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decltype(std::begin(std::declval&lt;T&gt;()))</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decltype(std::end(std::declval&lt;T&gt;()))</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterable</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr auto </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="28" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="28" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a6c0a41716a24bed07cbf8b2d84132f96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto py::range</definition>
        <argsstring>(T start, T stop)</argsstring>
        <name>range</name>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="97" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="97" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a60b1464018ad9d097a2657f82cd62da7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto py::range</definition>
        <argsstring>(T stop)</argsstring>
        <name>range</name>
        <param>
          <type>T</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="159" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a73835b0c7d78e35d5617d33c3f31e272" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool py::operator&lt;</definition>
        <argsstring>(const Key &amp;key, const set&lt; Key &gt; &amp;m)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const Key &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classpy_1_1set" kindref="compound">set</ref>&lt; Key &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="265" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1ad518698176e873de2aa8d0338ffbbb95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t py::len</definition>
        <argsstring>(const set&lt; Key &gt; &amp;m)</argsstring>
        <name>len</name>
        <param>
          <type>const <ref refid="classpy_1_1set" kindref="compound">set</ref>&lt; Key &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="278" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1aaa51295a6a1a4b5637e472c2f6495c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>py::set</definition>
        <argsstring>(std::initializer_list&lt; Key &gt;) -&gt; set&lt; Key &gt;</argsstring>
        <name>set</name>
        <param>
          <type>std::initializer_list&lt; Key &gt;</type>
        </param>
        <briefdescription>
<para>Template Deduction Guide. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a4915f28ea8b508e4077e5eadabd168e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool py::operator&lt;</definition>
        <argsstring>(const Key &amp;key, const dict&lt; Key, T &gt; &amp;m)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const Key &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classpy_1_1dict" kindref="compound">dict</ref>&lt; Key, T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="478" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a058d85f30aee848249988ce734c1af2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t py::len</definition>
        <argsstring>(const dict&lt; Key, T &gt; &amp;m)</argsstring>
        <name>len</name>
        <param>
          <type>const <ref refid="classpy_1_1dict" kindref="compound">dict</ref>&lt; Key, T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="492" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a23d73e1d7b7ad4173ce85bac6af8d312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>py::dict</definition>
        <argsstring>(std::initializer_list&lt; std::pair&lt; const Key, T &gt;&gt;) -&gt; dict&lt; Key, T &gt;</argsstring>
        <name>dict</name>
        <param>
          <type>std::initializer_list&lt; std::pair&lt; const Key, T &gt;&gt;</type>
        </param>
        <briefdescription>
<para>Template Deduction Guide. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="py2cpp_8hpp_1a9f433dfee246410b8948c816b3722327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Sequence</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>py::dict</definition>
        <argsstring>(const Sequence &amp;S) -&gt; dict&lt; std::remove_cv_t&lt; decltype(*std::begin(S))&gt;, size_t &gt;</argsstring>
        <name>dict</name>
        <param>
          <type>const Sequence &amp;</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="507" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/py2cpp.hpp" line="15" column="1"/>
  </compounddef>
</doxygen>
