<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacexn" kind="namespace" language="C++">
    <compoundname>xn</compoundname>
    <innerclass refid="structxn_1_1AmbiguousSolution" prot="public">xn::AmbiguousSolution</innerclass>
    <innerclass refid="classxn_1_1AtlasView" prot="public">xn::AtlasView</innerclass>
    <innerclass refid="classxn_1_1EdgeView" prot="public">xn::EdgeView</innerclass>
    <innerclass refid="structxn_1_1ExceededMaxIterations" prot="public">xn::ExceededMaxIterations</innerclass>
    <innerclass refid="classxn_1_1grAdaptor" prot="public">xn::grAdaptor</innerclass>
    <innerclass refid="classxn_1_1Graph" prot="public">xn::Graph</innerclass>
    <innerclass refid="structxn_1_1HasACycle" prot="public">xn::HasACycle</innerclass>
    <innerclass refid="structxn_1_1NodeNotFound" prot="public">xn::NodeNotFound</innerclass>
    <innerclass refid="classxn_1_1NodeView" prot="public">xn::NodeView</innerclass>
    <innerclass refid="structxn_1_1object" prot="public">xn::object</innerclass>
    <innerclass refid="classxn_1_1VertexView" prot="public">xn::VertexView</innerclass>
    <innerclass refid="structxn_1_1XNetworkAlgorithmError" prot="public">xn::XNetworkAlgorithmError</innerclass>
    <innerclass refid="structxn_1_1XNetworkError" prot="public">xn::XNetworkError</innerclass>
    <innerclass refid="structxn_1_1XNetworkException" prot="public">xn::XNetworkException</innerclass>
    <innerclass refid="structxn_1_1XNetworkNoCycle" prot="public">xn::XNetworkNoCycle</innerclass>
    <innerclass refid="structxn_1_1XNetworkNoPath" prot="public">xn::XNetworkNoPath</innerclass>
    <innerclass refid="structxn_1_1XNetworkNotImplemented" prot="public">xn::XNetworkNotImplemented</innerclass>
    <innerclass refid="structxn_1_1XNetworkPointlessConcept" prot="public">xn::XNetworkPointlessConcept</innerclass>
    <innerclass refid="structxn_1_1XNetworkUnbounded" prot="public">xn::XNetworkUnbounded</innerclass>
    <innerclass refid="structxn_1_1XNetworkUnfeasible" prot="public">xn::XNetworkUnfeasible</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacexn_1aaf2bd524584cfeb881cb86dcfdcd3fd2" prot="public" static="no">
        <type><ref refid="classxn_1_1Graph" kindref="compound">Graph</ref>&lt; decltype(py::range&lt; int &gt;(1)), decltype(py::range&lt; int &gt;(1)), <ref refid="classpy_1_1set" kindref="compound">py::set</ref>&lt; int &gt; &gt;</type>
        <definition>using xn::SimpleGraph = typedef Graph&lt;decltype(py::range&lt;int&gt;(1)), decltype(py::range&lt;int&gt;(1)), py::set&lt;int&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>SimpleGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" line="767" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/graph.hpp" bodystart="768" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacexn_1ae3cb5953d02f34b9e32bed3fc09fa56d" prot="public" static="yes" mutable="no">
        <type>const auto</type>
        <definition>static const auto xn::__slots__</definition>
        <argsstring></argsstring>
        <name>__slots__</name>
        <initializer>= ()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A DataView class for nodes of a XNetwork <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref></para><para>The main use for this class is to iterate through node-data pairs. The data can be the entire data-dictionary for each node, or it can be a specific attribute (with default) for each node. Set operations are enabled with NodeDataView, but don&apos;t work in cases where the data is not hashable. Use with caution. Typically, set operations on nodes use <ref refid="classxn_1_1NodeView" kindref="compound">NodeView</ref>, not NodeDataView. That is, they use <computeroutput>G.nodes</computeroutput> instead of <computeroutput>G.nodes(data=&quot;foo&quot;)</computeroutput>.</para><para><heading level="1">Parameters </heading>
</para><para>graph : XNetwork graph-like class data : bool || string (default=false); default : object (default=None); A View class for degree of nodes : a XNetwork <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref></para><para>The functionality is like dict.items() with (node, degree) pairs. Additional functionality includes read-only lookup of node degree, &amp;&amp; calling with optional features nbunch (for only a subset of nodes); &amp;&amp; weight (use edge weights to compute degree).</para><para><heading level="1">Parameters </heading>
</para><para>graph : XNetwork graph-like class nbunch : node, container of nodes, || None meaning all nodes (default=None); weight : bool || string (default=None);</para><para><heading level="2">Notes </heading>
</para><para>DegreeView can still lookup any node even if (nbunch is specified.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3); DV = G.degree(); assert(DV[2] == 1); assert(sum(deg for n, deg : DV) == 4); </para></blockquote></para></blockquote></para></blockquote></para><para><blockquote><para><blockquote><para><blockquote><para>DVweight = G.degree(weight=&quot;span&quot;); G.add_edge(1, 2, span=34); DVweight[2]; </para></blockquote></para></blockquote></para></blockquote>34 <blockquote><para><blockquote><para><blockquote><para>DVweight[0]; // default edge weight is 1 </para></blockquote></para></blockquote></para></blockquote>1 <blockquote><para><blockquote><para><blockquote><para>sum(span for n, span : DVweight); // sum weighted degrees </para></blockquote></para></blockquote></para></blockquote>70</para><para><blockquote><para><blockquote><para><blockquote><para>DVnbunch = G.degree(nbunch=(1, 2)); assert(len(list(DVnbunch)) == 2); // iteration over nbunch only</para></blockquote></para></blockquote></para></blockquote>A DegreeView class to act as G.degree for a XNetwork <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref></para><para>Typical usage focuses on iteration over <computeroutput>(node, degree)</computeroutput> pairs. The degree is by default the number of edges incident to the node. Optional argument <computeroutput>weight</computeroutput> enables weighted degree using the edge attribute named : the <computeroutput>weight</computeroutput> argument. Reporting &amp;&amp; iteration can also be restricted to a subset of nodes using <computeroutput>nbunch</computeroutput>.</para><para>Additional functionality include node lookup so that <computeroutput>G.degree[n]</computeroutput> reported the (possibly weighted) degree of node <computeroutput>n</computeroutput>. Calling the view creates a view with different arguments <computeroutput>nbunch</computeroutput> || <computeroutput>weight</computeroutput>.</para><para><heading level="1">Parameters </heading>
</para><para>graph : XNetwork graph-like class nbunch : node, container of nodes, || None meaning all nodes (default=None); weight : string || None (default=None);</para><para><heading level="2">Notes </heading>
</para><para>DegreeView can still lookup any node even if (nbunch is specified.</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3); DV = G.degree(); assert(DV[2] == 1); assert(G.degree[2] == 1); assert(sum(deg for n, deg : DV) == 4); </para></blockquote></para></blockquote></para></blockquote></para><para><blockquote><para><blockquote><para><blockquote><para>DVweight = G.degree(weight=&quot;span&quot;); G.add_edge(1, 2, span=34); DVweight[2]; </para></blockquote></para></blockquote></para></blockquote>34 <blockquote><para><blockquote><para><blockquote><para>DVweight[0]; // default edge weight is 1 </para></blockquote></para></blockquote></para></blockquote>1 <blockquote><para><blockquote><para><blockquote><para>sum(span for n, span : DVweight); // sum weighted degrees </para></blockquote></para></blockquote></para></blockquote>70</para><para><blockquote><para><blockquote><para><blockquote><para>DVnbunch = G.degree(nbunch=(1, 2)); assert(len(list(DVnbunch)) == 2); // iteration over nbunch only</para></blockquote></para></blockquote></para></blockquote>A DegreeView class to report out_degree for a DiGraph; See DegreeViewA DegreeView class to report in_degree for a DiGraph; See DegreeViewA DegreeView class for undirected multigraphs; See DegreeView A DegreeView class for MultiDiGraph; See DegreeView A DegreeView class for inward degree of MultiDiGraph; See DegreeViewA DegreeView class for outward degree of MultiDiGraph; See DegreeViewEdgeDataView for outward edges of DiGraph; See EdgeDataView A EdgeDataView class for edges of <ref refid="classxn_1_1Graph" kindref="compound">Graph</ref></para><para>This view is primarily used to iterate over the edges reporting edges as node-tuples with edge data optionally reported. The argument <computeroutput>nbunch</computeroutput> allows restriction to edges incident to nodes : that container/singleton. The default (nbunch=None); reports all edges. The arguments <computeroutput>data</computeroutput> &amp;&amp; <computeroutput>default</computeroutput> control what edge data is reported. The default <computeroutput>data == false</computeroutput> reports only node-tuples for each edge. If <computeroutput>data is true</computeroutput> the entire edge data dict is returned. Otherwise <computeroutput>data</computeroutput> is assumed to hold the name of the edge attribute to report with default <computeroutput>default</computeroutput> if ( that edge attribute is not present.</para><para><heading level="2">Parameters </heading>
</para><para>nbunch : container of nodes, node || None (default None); data : false, true || string (default false); default : default value (default None);</para><para><heading level="2">Examples </heading>
</para><para><blockquote><para><blockquote><para><blockquote><para>G = xn::path_graph(3); G.add_edge(1, 2, foo=&quot;bar&quot;); list(G.edges(data=&quot;foo&quot;, default=&quot;biz&quot;)); </para></blockquote></para></blockquote></para></blockquote>[(0, 1, &quot;biz&quot;), (1, 2, &quot;bar&quot;)]; <blockquote><para><blockquote><para><blockquote><para>assert((0, 1, &quot;biz&quot;] : G.edges(data=&quot;foo&quot;, default=&quot;biz&quot;));</para></blockquote></para></blockquote></para></blockquote>An EdgeDataView class for outward edges of DiGraph; See EdgeDataView</para><para>An EdgeDataView for outward edges of MultiDiGraph; See EdgeDataView </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/reportviews.hpp" line="896" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/classes/reportviews.hpp" bodystart="896" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>View Classes provide node, edge &amp;&amp; degree &quot;views&quot; of a graph.</para><para>Views for nodes, edges &amp;&amp; degree are provided for all base graph classes. A view means a read-only object that is quick to create, automatically updated when the graph changes, &amp;&amp; provides basic access like <computeroutput>n : V</computeroutput>, <computeroutput>for n : V</computeroutput>, <computeroutput>V[n]</computeroutput> &amp;&amp; sometimes set operations.</para><para>The views are read-only iterable containers that are updated as the graph is updated. As with dicts, the graph should not be updated while (iterating through the view. Views can be iterated multiple times.</para><para>Edge &amp;&amp; Node views also allow data attribute lookup. The resulting attribute dict is writable as <computeroutput>G.edges[3, 4][&quot;color&quot;]=&quot;red&quot;</computeroutput> Degree views allow lookup of degree values for single nodes. Weighted degree is supported with the <computeroutput>weight</computeroutput> argument.</para><para><heading level="1"><ref refid="classxn_1_1NodeView" kindref="compound">NodeView</ref> </heading>
</para><para><verbatim>`V = G.nodes` (or `V = G.nodes()`) allows `len(V)`, `n : V`, set
operations e.g. &quot;G.nodes &amp; H.nodes&quot;, &amp;&amp; `dd = G.nodes[n]`, where
`dd` is the node data dict. Iteration is over the nodes by default.
</verbatim></para><para><heading level="1">NodeDataView </heading>
</para><para><verbatim>To iterate over (node, data) pairs, use arguments to `G.nodes()`
to create a DataView e.g. `DV = G.nodes(data=&quot;color&quot;, default=&quot;red&quot;)`.
The DataView iterates as `for n, color : DV` &amp;&amp; allows
`(n, &quot;red&quot;] : DV`. Using `DV = G.nodes(data=true)`, the DataViews
use the full datadict : writeable form also allowing contain testing as
`(n, {&quot;color&quot;: &quot;red&quot;}] : VD`. DataViews allow set operations when
data attributes are hashable.
</verbatim></para><para><heading level="1">DegreeView </heading>
</para><para><verbatim>`V = G.degree` allows iteration over (node, degree) pairs as well
as lookup: `deg=V[n]`. There are many flavors of DegreeView
for (auto In/Out/Directed/Multi. For Directed Graphs, `G.degree`
counts both : &amp;&amp; out going edges. `G.out_degree` &amp;&amp;
`G.in_degree` count only specific directions.
Weighted degree using edge data attributes is provide via
`V = G.degree(weight=&quot;attr_name&quot;)` where any string with the
attribute name can be used. `weight=None` is the default.
No set operations are implemented for degrees, use NodeView.

The argument `nbunch` restricts iteration to nodes : nbunch.
The DegreeView can still lookup any node even if (nbunch is specified.
</verbatim></para><para><heading level="1"><ref refid="classxn_1_1EdgeView" kindref="compound">EdgeView</ref> </heading>
</para><para><verbatim>`V = G.edges` or `V = G.edges()` allows iteration over edges as well as
`e : V`, set operations &amp;&amp; edge data lookup `dd = G.edges[2, 3]`.
Iteration is over 2-tuples `(u, v)` for Graph/DiGraph. For multigraphs
edges 3-tuples `(u, v, key)` are the default but 2-tuples can be obtained
via `V = G.edges(keys=false)`.

Set operations for directed graphs treat the edges as a set of 2-tuples.
For undirected graphs, 2-tuples are not a unique representation of edges.
So long as the set being compared to contains unique representations
of its edges, the set operations will act as expected. If the other
set contains both `(0, 1)` &amp;&amp; `(1, 0)` however, the result of set
operations may contain both representations of the same edge.
</verbatim></para><para><heading level="1">EdgeDataView </heading>
</para><para><verbatim>Edge data can be reported using an EdgeDataView typically created
by calling an EdgeView: `DV = G.edges(data=&quot;weight&quot;, default=1)`.
The EdgeDataView allows iteration over edge tuples, membership checking
but no set operations.

Iteration depends on `data` &amp;&amp; `default` &amp;&amp; for multigraph `keys`
If `data == false` (the default) then iterate over 2-tuples `(u, v)`.
If `data is true` iterate over 3-tuples `(u, v, datadict)`.
Otherwise iterate over `(u, v, datadict.get(data, default))`.
For Multigraphs, if (`keys is true`, replace `u, v` with `u, v, key`
to create 3-tuples &amp;&amp; 4-tuples.

The argument `nbunch` restricts edges to those incident to nodes : nbunch.</verbatim></para><para>Exceptions</para><para>Base exceptions &amp;&amp; errors for XNetwork. </para>    </detaileddescription>
    <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/py2cpp/nx2bgl.hpp" line="10" column="1"/>
  </compounddef>
</doxygen>
