<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structdllink" kind="struct" language="C++" prot="public">
    <compoundname>dllink</compoundname>
    <includes refid="dllist_8hpp" local="no">dllist.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structdllink_1a010073767a88d7d88505b8fc951e7e7a" prot="public" static="no">
        <type>boost::coroutines2::coroutine&lt; <ref refid="structdllink" kindref="compound">dllink</ref>&lt; T &gt; &amp; &gt;</type>
        <definition>using dllink&lt; T &gt;::coro_t =  boost::coroutines2::coroutine&lt;dllink&lt;T&gt;&amp;&gt;</definition>
        <argsstring></argsstring>
        <name>coro_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dll_iterator</para></simplesect>
<simplesect kind="return"><para>dll_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="169" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structdllink_1a8f2211982a399271866b4be658eff7c4" prot="public" static="no">
        <type>typename coro_t::pull_type</type>
        <definition>using dllink&lt; T &gt;::pull_t =  typename coro_t::pull_type</definition>
        <argsstring></argsstring>
        <name>pull_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="170" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdllink_1af4e17a775829ea32c10061036b9e5600" prot="public" static="no" mutable="no">
        <type><ref refid="structdllink" kindref="compound">dllink</ref>&lt; T &gt; *</type>
        <definition>dllink&lt;T&gt;* dllink&lt; T &gt;::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <initializer>{this}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pointer to the next node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="23" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdllink_1ab5b08387f1b95096f3edcfdd2249d358" prot="public" static="no" mutable="no">
        <type><ref refid="structdllink" kindref="compound">dllink</ref>&lt; T &gt; *</type>
        <definition>dllink&lt;T&gt;* dllink&lt; T &gt;::prev</definition>
        <argsstring></argsstring>
        <name>prev</name>
        <initializer>{this}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pointer to the previous node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="24" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdllink_1a8a41f69bf7d5bbddf3b73a1c56af3c2c" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T dllink&lt; T &gt;::key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>key/data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="25" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdllink_1a83f5e5be1816f9cbbf641fc84466c201" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dllink&lt; T &gt;::dllink</definition>
        <argsstring>(T key=T(0))</argsstring>
        <name>dllink</name>
        <param>
          <type>T</type>
          <declname>key</declname>
          <defval>T(0)</defval>
        </param>
        <briefdescription>
<para>Construct a new dllink object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="32" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1a9d548acd46113a823186afdfd7d368f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dllink&lt; T &gt;::dllink</definition>
        <argsstring>(dllink&lt; T &gt; &amp;)=delete</argsstring>
        <name>dllink</name>
        <param>
          <type><ref refid="structdllink" kindref="compound">dllink</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Copy construct a new dllink object (deleted intentionally) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1aa628b627b8ba21752a7055527b2661da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::detach</definition>
        <argsstring>() -&gt; void</argsstring>
        <name>detach</name>
        <briefdescription>
<para>detach from a list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="48" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1a9d9e4b26c3ace4f2f5bff4da4181250a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::lock</definition>
        <argsstring>() -&gt; void</argsstring>
        <name>lock</name>
        <briefdescription>
<para>lock the node (and don&apos;t append it to any list) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="61" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1a0b642844c668c0fd74654067c1404d5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::is_locked</definition>
        <argsstring>() const -&gt; bool</argsstring>
        <name>is_locked</name>
        <briefdescription>
<para>whether the node is locked </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="72" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1afa6e22c24032345f60b0f340c7287f5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::is_empty</definition>
        <argsstring>() const -&gt; bool</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>whether the list is empty </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="83" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1a93d4d74b35b2b0ea2355150e58d262ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::clear</definition>
        <argsstring>() -&gt; void</argsstring>
        <name>clear</name>
        <briefdescription>
<para>reset the list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="92" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1ab48bba4c376704cb769c9dc2a5f64401" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::appendleft</definition>
        <argsstring>(dllink&lt; T &gt; &amp;node) -&gt; void</argsstring>
        <name>appendleft</name>
        <param>
          <type><ref refid="structdllink" kindref="compound">dllink</ref>&lt; T &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>append the node to the front </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="102" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="102" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1aa8c7bf316a46d3404cff0dfc64cef5ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::append</definition>
        <argsstring>(dllink&lt; T &gt; &amp;node) -&gt; void</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="structdllink" kindref="compound">dllink</ref>&lt; T &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>append the node to the back </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="115" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1ac9e3f618188a318cb53747e6bb4f417c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::popleft</definition>
        <argsstring>() -&gt; dllink&lt; T &gt; &amp;</argsstring>
        <name>popleft</name>
        <briefdescription>
<para>pop a node from the front </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dllink&amp;</para></simplesect>
Precondition: list is not empty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="130" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1a05ab31e14ab4e8ea262732a0a17ccc45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::pop</definition>
        <argsstring>() -&gt; dllink&lt; T &gt; &amp;</argsstring>
        <name>pop</name>
        <briefdescription>
<para>pop a node from the back </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dllink&amp;</para></simplesect>
Precondition: list is not empty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="145" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="145" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structdllink_1a8208ea6c265f719be92c5682d2008e23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dllink&lt; T &gt;::items</definition>
        <argsstring>() -&gt; pull_t</argsstring>
        <name>items</name>
        <briefdescription>
<para>item generator </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pull_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="177" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="177" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>doubly linked node (that may also be a &quot;head&quot; a list) </para>    </briefdescription>
    <detaileddescription>
<para>A Doubly-linked List class. This class simply contains a link of node&apos;s. By adding a &quot;head&quot; node (sentinel), deleting a node is extremely fast (see &quot;Introduction to Algorithm&quot;). This class does not keep the length information as it is not necessary for the FM algorithm. This saves memory and run-time to update the length information. Note that this class does not own the list node. They are supplied by the caller in order to better reuse the nodes. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="23">
        <label>T</label>
      </node>
      <node id="22">
        <label>dllink&lt; T &gt;</label>
        <link refid="structdllink"/>
        <childnode refid="23" relation="usage">
          <edgelabel>key</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" line="22" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/ckpttncpp/dllist.hpp" bodystart="21" bodyend="192"/>
    <listofallmembers>
      <member refid="structdllink_1aa8c7bf316a46d3404cff0dfc64cef5ec" prot="public" virt="non-virtual"><scope>dllink</scope><name>append</name></member>
      <member refid="structdllink_1ab48bba4c376704cb769c9dc2a5f64401" prot="public" virt="non-virtual"><scope>dllink</scope><name>appendleft</name></member>
      <member refid="structdllink_1a93d4d74b35b2b0ea2355150e58d262ae" prot="public" virt="non-virtual"><scope>dllink</scope><name>clear</name></member>
      <member refid="structdllink_1a010073767a88d7d88505b8fc951e7e7a" prot="public" virt="non-virtual"><scope>dllink</scope><name>coro_t</name></member>
      <member refid="structdllink_1aa628b627b8ba21752a7055527b2661da" prot="public" virt="non-virtual"><scope>dllink</scope><name>detach</name></member>
      <member refid="structdllink_1a83f5e5be1816f9cbbf641fc84466c201" prot="public" virt="non-virtual"><scope>dllink</scope><name>dllink</name></member>
      <member refid="structdllink_1a9d548acd46113a823186afdfd7d368f2" prot="public" virt="non-virtual"><scope>dllink</scope><name>dllink</name></member>
      <member refid="structdllink_1afa6e22c24032345f60b0f340c7287f5e" prot="public" virt="non-virtual"><scope>dllink</scope><name>is_empty</name></member>
      <member refid="structdllink_1a0b642844c668c0fd74654067c1404d5b" prot="public" virt="non-virtual"><scope>dllink</scope><name>is_locked</name></member>
      <member refid="structdllink_1a8208ea6c265f719be92c5682d2008e23" prot="public" virt="non-virtual"><scope>dllink</scope><name>items</name></member>
      <member refid="structdllink_1a8a41f69bf7d5bbddf3b73a1c56af3c2c" prot="public" virt="non-virtual"><scope>dllink</scope><name>key</name></member>
      <member refid="structdllink_1a9d9e4b26c3ace4f2f5bff4da4181250a" prot="public" virt="non-virtual"><scope>dllink</scope><name>lock</name></member>
      <member refid="structdllink_1af4e17a775829ea32c10061036b9e5600" prot="public" virt="non-virtual"><scope>dllink</scope><name>next</name></member>
      <member refid="structdllink_1a05ab31e14ab4e8ea262732a0a17ccc45" prot="public" virt="non-virtual"><scope>dllink</scope><name>pop</name></member>
      <member refid="structdllink_1ac9e3f618188a318cb53747e6bb4f417c" prot="public" virt="non-virtual"><scope>dllink</scope><name>popleft</name></member>
      <member refid="structdllink_1ab5b08387f1b95096f3edcfdd2249d358" prot="public" virt="non-virtual"><scope>dllink</scope><name>prev</name></member>
      <member refid="structdllink_1a8f2211982a399271866b4be658eff7c4" prot="public" virt="non-virtual"><scope>dllink</scope><name>pull_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
