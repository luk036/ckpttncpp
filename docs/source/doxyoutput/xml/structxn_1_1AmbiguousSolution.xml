<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structxn_1_1AmbiguousSolution" kind="struct" language="C++" prot="public">
    <compoundname>xn::AmbiguousSolution</compoundname>
    <basecompoundref refid="structxn_1_1XNetworkException" prot="public" virt="non-virtual">xn::XNetworkException</basecompoundref>
    <includes refid="exception_8hpp" local="no">exception.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structxn_1_1AmbiguousSolution_1a13aad33c938d66cfb8c2ebf2c1df13f4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>xn::AmbiguousSolution::AmbiguousSolution</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>AmbiguousSolution</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/exception.hpp" line="163" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/exception.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Raised if (more than one valid solution exists for an intermediary step of an algorithm.</para><para>In the face of ambiguity, refuse the temptation to guess. This may occur, for example, when trying to determine the bipartite node sets in a disconnected bipartite graph when computing bipartite matchings. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>xn::XNetworkException</label>
        <link refid="structxn_1_1XNetworkException"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>std::runtime_error</label>
      </node>
      <node id="4">
        <label>xn::AmbiguousSolution</label>
        <link refid="structxn_1_1AmbiguousSolution"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>xn::XNetworkException</label>
        <link refid="structxn_1_1XNetworkException"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>std::runtime_error</label>
      </node>
      <node id="7">
        <label>xn::AmbiguousSolution</label>
        <link refid="structxn_1_1AmbiguousSolution"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/exception.hpp" line="162" column="1" bodyfile="/media/lubuntu/USBDISK/github/ckpttncpp/lib/include/xnetwork/exception.hpp" bodystart="161" bodyend="167"/>
    <listofallmembers>
      <member refid="structxn_1_1AmbiguousSolution_1a13aad33c938d66cfb8c2ebf2c1df13f4" prot="public" virt="non-virtual"><scope>xn::AmbiguousSolution</scope><name>AmbiguousSolution</name></member>
      <member refid="structxn_1_1XNetworkException_1adf7ac46d6cef6d2fcee880fc2f709458" prot="public" virt="non-virtual"><scope>xn::AmbiguousSolution</scope><name>XNetworkException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
